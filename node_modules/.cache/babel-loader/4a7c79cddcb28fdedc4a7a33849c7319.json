{"ast":null,"code":"import*as actionTypes from\"./actionsTypes\";import axios from\"axios\";export var authStart=function authStart(){return{type:actionTypes.AUTH_START};};export var authSuccess=function authSuccess(token,userId){return{type:actionTypes.AUTH_SUCCESS,idToken:token,userId:userId};};export var authFail=function authFail(error){return{type:actionTypes.AUTH_FAIL,error:error};};export var logout=function logout(){localStorage.removeItem(\"token\");localStorage.removeItem(\"expirationDate\");localStorage.removeItem(\"userId\");return{type:actionTypes.AUTH_LOGOUT};};export var checkAuthTimeout=function checkAuthTimeout(expirationTime){return function(dispatch){setTimeout(function(){dispatch(logout());},expirationTime*1000);};};export var auth=function auth(email,password,isSignup){return function(dispatch){dispatch(authStart());var authData={email:email,password:password,returnSecureToken:true};var url=\"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBosroe0LInumqEwQN-h9YJMNXqhpPJR7s\";if(!isSignup){url=\"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBosroe0LInumqEwQN-h9YJMNXqhpPJR7s\";}axios.post(url,authData).then(function(response){var expirationDate=new Date(new Date().getTime()+response.data.expiresIn*1000);localStorage.setItem(\"token\",response.data.idToken);localStorage.setItem(\"expirationDate\",expirationDate);localStorage.setItem(\"userId\",response.data.localId);dispatch(authSuccess(response.data.idToken,response.data.localId));dispatch(checkAuthTimeout(response.data.expiresIn));}).catch(function(err){dispatch(authFail(err.response.data.error));});};};export var setAuthRedirectPath=function setAuthRedirectPath(path){return{type:actionTypes.SET_AUTH_REDIRECT_PATH,path:path};};export var authCheckState=function authCheckState(){return function(dispatch){var token=localStorage.getItem(\"token\");if(!token){dispatch(logout());}else{var expirationDate=new Date(localStorage.getItem(\"expirationDate\"));if(expirationDate<=new Date()){dispatch(logout());}else{var userId=localStorage.getItem(\"userId\");dispatch(authSuccess(token,userId));dispatch(checkAuthTimeout((expirationDate.getTime()-new Date().getTime())/1000));}}};};","map":{"version":3,"sources":["C:/Users/Natalia/Desktop/React course/burger-builder/src/store/actions/auth.js"],"names":["actionTypes","axios","authStart","type","AUTH_START","authSuccess","token","userId","AUTH_SUCCESS","idToken","authFail","error","AUTH_FAIL","logout","localStorage","removeItem","AUTH_LOGOUT","checkAuthTimeout","expirationTime","dispatch","setTimeout","auth","email","password","isSignup","authData","returnSecureToken","url","post","then","response","expirationDate","Date","getTime","data","expiresIn","setItem","localId","catch","err","setAuthRedirectPath","path","SET_AUTH_REDIRECT_PATH","authCheckState","getItem"],"mappings":"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","sourcesContent":["import * as actionTypes from \"./actionsTypes\";\r\nimport axios from \"axios\";\r\n\r\nexport const authStart = () => {\r\n  return {\r\n    type: actionTypes.AUTH_START,\r\n  };\r\n};\r\n\r\nexport const authSuccess = (token, userId) => {\r\n  return {\r\n    type: actionTypes.AUTH_SUCCESS,\r\n    idToken: token,\r\n    userId: userId,\r\n  };\r\n};\r\n\r\nexport const authFail = (error) => {\r\n  return {\r\n    type: actionTypes.AUTH_FAIL,\r\n    error: error,\r\n  };\r\n};\r\n\r\nexport const logout = () => {\r\n  localStorage.removeItem(\"token\");\r\n  localStorage.removeItem(\"expirationDate\");\r\n  localStorage.removeItem(\"userId\");\r\n\r\n  return {\r\n    type: actionTypes.AUTH_LOGOUT,\r\n  };\r\n};\r\n\r\nexport const checkAuthTimeout = (expirationTime) => {\r\n  return (dispatch) => {\r\n    setTimeout(() => {\r\n      dispatch(logout());\r\n    }, expirationTime * 1000);\r\n  };\r\n};\r\n\r\nexport const auth = (email, password, isSignup) => {\r\n  return (dispatch) => {\r\n    dispatch(authStart());\r\n    const authData = {\r\n      email: email,\r\n      password: password,\r\n      returnSecureToken: true,\r\n    };\r\n    let url =\r\n      \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBosroe0LInumqEwQN-h9YJMNXqhpPJR7s\";\r\n    if (!isSignup) {\r\n      url =\r\n        \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBosroe0LInumqEwQN-h9YJMNXqhpPJR7s\";\r\n    }\r\n    axios\r\n      .post(url, authData)\r\n      .then((response) => {\r\n        const expirationDate = new Date(\r\n          new Date().getTime() + response.data.expiresIn * 1000\r\n        );\r\n        localStorage.setItem(\"token\", response.data.idToken);\r\n        localStorage.setItem(\"expirationDate\", expirationDate);\r\n        localStorage.setItem(\"userId\", response.data.localId);\r\n        dispatch(authSuccess(response.data.idToken, response.data.localId));\r\n        dispatch(checkAuthTimeout(response.data.expiresIn));\r\n      })\r\n      .catch((err) => {\r\n        dispatch(authFail(err.response.data.error));\r\n      });\r\n  };\r\n};\r\n\r\nexport const setAuthRedirectPath = (path) => {\r\n  return {\r\n    type: actionTypes.SET_AUTH_REDIRECT_PATH,\r\n    path: path,\r\n  };\r\n};\r\n\r\nexport const authCheckState = () => {\r\n  return (dispatch) => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (!token) {\r\n      dispatch(logout());\r\n    } else {\r\n      const expirationDate = new Date(localStorage.getItem(\"expirationDate\"));\r\n      if (expirationDate <= new Date()) {\r\n        dispatch(logout());\r\n      } else {\r\n        const userId = localStorage.getItem(\"userId\");\r\n        dispatch(authSuccess(token, userId));\r\n        dispatch(\r\n          checkAuthTimeout(\r\n            (expirationDate.getTime() - new Date().getTime()) / 1000\r\n          )\r\n        );\r\n      }\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}