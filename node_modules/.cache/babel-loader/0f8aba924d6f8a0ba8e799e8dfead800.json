{"ast":null,"code":"import { put, delay, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport * as actions from \"../actions/index\";\nexport function* logoutSaga(action) {\n  yield call([localStorage, \"removeItem\"], \"token\");\n  yield call([localStorage, \"removeItem\"], \"expirationDate\");\n  yield call([localStorage, \"removeItem\"], \"userId\"); // yield localStorage.removeItem(\"token\");\n  // yield localStorage.removeItem(\"expirationDate\");\n  // yield localStorage.removeItem(\"userId\");\n\n  yield put(actions.logoutSucceed());\n}\nexport function* checkAuthTimeoutSaga(action) {\n  yield delay(action.expirationTime * 1000);\n  yield put(actions.logout());\n}\nexport function* authUserSaga(action) {\n  yield put(actions.authStart());\n  const authData = {\n    email: action.email,\n    password: action.password,\n    returnSecureToken: true\n  };\n  let url = \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBosroe0LInumqEwQN-h9YJMNXqhpPJR7s\";\n\n  if (!action.isSignup) {\n    url = \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBosroe0LInumqEwQN-h9YJMNXqhpPJR7s\";\n  }\n\n  try {\n    const response = yield axios.post(url, authData);\n    const expirationDate = yield new Date(new Date().getTime() + response.data.expiresIn * 1000);\n    yield localStorage.setItem(\"token\", response.data.idToken);\n    yield localStorage.setItem(\"expirationDate\", expirationDate);\n    yield localStorage.setItem(\"userId\", response.data.localId);\n    yield put(actions.authSuccess(response.data.idToken, response.data.localId));\n    yield put(actions.checkAuthTimeout(response.data.expiresIn));\n  } catch (error) {\n    yield put(actions.authFail(error.response.data.error));\n  }\n}\nexport function* authCheckStateSaga(action) {\n  const token = yield localStorage.getItem(\"token\");\n\n  if (!token) {\n    yield put(actions.logout());\n  } else {\n    const expirationDate = yield new Date(localStorage.getItem(\"expirationDate\"));\n\n    if (expirationDate <= new Date()) {\n      yield put(actions.logout());\n    } else {\n      const userId = yield localStorage.getItem(\"userId\");\n      yield put(actions.authSuccess(token, userId));\n      yield put(actions.checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/Natalia/Desktop/React course/burger-builder/src/store/sagas/auth.js"],"names":["put","delay","call","axios","actions","logoutSaga","action","localStorage","logoutSucceed","checkAuthTimeoutSaga","expirationTime","logout","authUserSaga","authStart","authData","email","password","returnSecureToken","url","isSignup","response","post","expirationDate","Date","getTime","data","expiresIn","setItem","idToken","localId","authSuccess","checkAuthTimeout","error","authFail","authCheckStateSaga","token","getItem","userId"],"mappings":"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","sourcesContent":["import { put, delay, call } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\n\r\nimport * as actions from \"../actions/index\";\r\n\r\nexport function* logoutSaga(action) {\r\n  yield call([localStorage, \"removeItem\"], \"token\");\r\n  yield call([localStorage, \"removeItem\"], \"expirationDate\");\r\n  yield call([localStorage, \"removeItem\"], \"userId\");\r\n  // yield localStorage.removeItem(\"token\");\r\n  // yield localStorage.removeItem(\"expirationDate\");\r\n  // yield localStorage.removeItem(\"userId\");\r\n  yield put(actions.logoutSucceed());\r\n}\r\n\r\nexport function* checkAuthTimeoutSaga(action) {\r\n  yield delay(action.expirationTime * 1000);\r\n  yield put(actions.logout());\r\n}\r\n\r\nexport function* authUserSaga(action) {\r\n  yield put(actions.authStart());\r\n  const authData = {\r\n    email: action.email,\r\n    password: action.password,\r\n    returnSecureToken: true,\r\n  };\r\n  let url =\r\n    \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBosroe0LInumqEwQN-h9YJMNXqhpPJR7s\";\r\n  if (!action.isSignup) {\r\n    url =\r\n      \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBosroe0LInumqEwQN-h9YJMNXqhpPJR7s\";\r\n  }\r\n  try {\r\n    const response = yield axios.post(url, authData);\r\n    const expirationDate = yield new Date(\r\n      new Date().getTime() + response.data.expiresIn * 1000\r\n    );\r\n    yield localStorage.setItem(\"token\", response.data.idToken);\r\n    yield localStorage.setItem(\"expirationDate\", expirationDate);\r\n    yield localStorage.setItem(\"userId\", response.data.localId);\r\n    yield put(\r\n      actions.authSuccess(response.data.idToken, response.data.localId)\r\n    );\r\n    yield put(actions.checkAuthTimeout(response.data.expiresIn));\r\n  } catch (error) {\r\n    yield put(actions.authFail(error.response.data.error));\r\n  }\r\n}\r\n\r\nexport function* authCheckStateSaga(action) {\r\n  const token = yield localStorage.getItem(\"token\");\r\n  if (!token) {\r\n    yield put(actions.logout());\r\n  } else {\r\n    const expirationDate = yield new Date(\r\n      localStorage.getItem(\"expirationDate\")\r\n    );\r\n    if (expirationDate <= new Date()) {\r\n      yield put(actions.logout());\r\n    } else {\r\n      const userId = yield localStorage.getItem(\"userId\");\r\n      yield put(actions.authSuccess(token, userId));\r\n      yield put(\r\n        actions.checkAuthTimeout(\r\n          (expirationDate.getTime() - new Date().getTime()) / 1000\r\n        )\r\n      );\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}