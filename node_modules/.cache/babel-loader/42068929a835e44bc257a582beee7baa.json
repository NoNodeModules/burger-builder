{"ast":null,"code":"// import { delay } from \"redux-saga\";\nimport { put, delay } from \"redux-saga/effects\";\nimport * as actions from \"../actions/index\";\nexport function* logoutSaga(action) {\n  yield localStorage.removeItem(\"token\");\n  yield localStorage.removeItem(\"expirationDate\");\n  yield localStorage.removeItem(\"userId\");\n  yield put(actions.logoutSucceed());\n}\nexport function* checkAuthTimeoutSaga(action) {\n  yield delay(action.expirationTime * 1000);\n  yield put(actions.logout());\n}\nexport function* authUserSaga(action) {\n  yield put(actions.authStart());\n  dispatch(authStart());\n  const authData = {\n    email: email,\n    password: password,\n    returnSecureToken: true\n  };\n  let url = \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBosroe0LInumqEwQN-h9YJMNXqhpPJR7s\";\n\n  if (!isSignup) {\n    url = \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBosroe0LInumqEwQN-h9YJMNXqhpPJR7s\";\n  }\n\n  axios.post(url, authData).then(response => {\n    const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);\n    localStorage.setItem(\"token\", response.data.idToken);\n    localStorage.setItem(\"expirationDate\", expirationDate);\n    localStorage.setItem(\"userId\", response.data.localId);\n    dispatch(authSuccess(response.data.idToken, response.data.localId));\n    dispatch(checkAuthTimeout(response.data.expiresIn));\n  }).catch(err => {\n    dispatch(authFail(err.response.data.error));\n  });\n}","map":{"version":3,"sources":["C:/Users/Natalia/Desktop/React course/burger-builder/src/store/sagas/auth.js"],"names":["put","delay","actions","logoutSaga","action","localStorage","removeItem","logoutSucceed","checkAuthTimeoutSaga","expirationTime","logout","authUserSaga","authStart","dispatch","authData","email","password","returnSecureToken","url","isSignup","axios","post","then","response","expirationDate","Date","getTime","data","expiresIn","setItem","idToken","localId","authSuccess","checkAuthTimeout","catch","err","authFail","error"],"mappings":"AAAA;AACA,SAASA,GAAT,EAAcC,KAAd,QAA2B,oBAA3B;AAEA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AAEA,OAAO,UAAUC,UAAV,CAAqBC,MAArB,EAA6B;AAClC,QAAMC,YAAY,CAACC,UAAb,CAAwB,OAAxB,CAAN;AACA,QAAMD,YAAY,CAACC,UAAb,CAAwB,gBAAxB,CAAN;AACA,QAAMD,YAAY,CAACC,UAAb,CAAwB,QAAxB,CAAN;AACA,QAAMN,GAAG,CAACE,OAAO,CAACK,aAAR,EAAD,CAAT;AACD;AAED,OAAO,UAAUC,oBAAV,CAA+BJ,MAA/B,EAAuC;AAC5C,QAAMH,KAAK,CAACG,MAAM,CAACK,cAAP,GAAwB,IAAzB,CAAX;AACA,QAAMT,GAAG,CAACE,OAAO,CAACQ,MAAR,EAAD,CAAT;AACD;AAED,OAAO,UAAUC,YAAV,CAAuBP,MAAvB,EAA+B;AACpC,QAAMJ,GAAG,CAACE,OAAO,CAACU,SAAR,EAAD,CAAT;AACAC,EAAAA,QAAQ,CAACD,SAAS,EAAV,CAAR;AACA,QAAME,QAAQ,GAAG;AACfC,IAAAA,KAAK,EAAEA,KADQ;AAEfC,IAAAA,QAAQ,EAAEA,QAFK;AAGfC,IAAAA,iBAAiB,EAAE;AAHJ,GAAjB;AAKA,MAAIC,GAAG,GACL,uGADF;;AAEA,MAAI,CAACC,QAAL,EAAe;AACbD,IAAAA,GAAG,GACD,mHADF;AAED;;AACDE,EAAAA,KAAK,CACFC,IADH,CACQH,GADR,EACaJ,QADb,EAEGQ,IAFH,CAESC,QAAD,IAAc;AAClB,UAAMC,cAAc,GAAG,IAAIC,IAAJ,CACrB,IAAIA,IAAJ,GAAWC,OAAX,KAAuBH,QAAQ,CAACI,IAAT,CAAcC,SAAd,GAA0B,IAD5B,CAAvB;AAGAvB,IAAAA,YAAY,CAACwB,OAAb,CAAqB,OAArB,EAA8BN,QAAQ,CAACI,IAAT,CAAcG,OAA5C;AACAzB,IAAAA,YAAY,CAACwB,OAAb,CAAqB,gBAArB,EAAuCL,cAAvC;AACAnB,IAAAA,YAAY,CAACwB,OAAb,CAAqB,QAArB,EAA+BN,QAAQ,CAACI,IAAT,CAAcI,OAA7C;AACAlB,IAAAA,QAAQ,CAACmB,WAAW,CAACT,QAAQ,CAACI,IAAT,CAAcG,OAAf,EAAwBP,QAAQ,CAACI,IAAT,CAAcI,OAAtC,CAAZ,CAAR;AACAlB,IAAAA,QAAQ,CAACoB,gBAAgB,CAACV,QAAQ,CAACI,IAAT,CAAcC,SAAf,CAAjB,CAAR;AACD,GAXH,EAYGM,KAZH,CAYUC,GAAD,IAAS;AACdtB,IAAAA,QAAQ,CAACuB,QAAQ,CAACD,GAAG,CAACZ,QAAJ,CAAaI,IAAb,CAAkBU,KAAnB,CAAT,CAAR;AACD,GAdH;AAeD","sourcesContent":["// import { delay } from \"redux-saga\";\r\nimport { put, delay } from \"redux-saga/effects\";\r\n\r\nimport * as actions from \"../actions/index\";\r\n\r\nexport function* logoutSaga(action) {\r\n  yield localStorage.removeItem(\"token\");\r\n  yield localStorage.removeItem(\"expirationDate\");\r\n  yield localStorage.removeItem(\"userId\");\r\n  yield put(actions.logoutSucceed());\r\n}\r\n\r\nexport function* checkAuthTimeoutSaga(action) {\r\n  yield delay(action.expirationTime * 1000);\r\n  yield put(actions.logout());\r\n}\r\n\r\nexport function* authUserSaga(action) {\r\n  yield put(actions.authStart());\r\n  dispatch(authStart());\r\n  const authData = {\r\n    email: email,\r\n    password: password,\r\n    returnSecureToken: true,\r\n  };\r\n  let url =\r\n    \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBosroe0LInumqEwQN-h9YJMNXqhpPJR7s\";\r\n  if (!isSignup) {\r\n    url =\r\n      \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBosroe0LInumqEwQN-h9YJMNXqhpPJR7s\";\r\n  }\r\n  axios\r\n    .post(url, authData)\r\n    .then((response) => {\r\n      const expirationDate = new Date(\r\n        new Date().getTime() + response.data.expiresIn * 1000\r\n      );\r\n      localStorage.setItem(\"token\", response.data.idToken);\r\n      localStorage.setItem(\"expirationDate\", expirationDate);\r\n      localStorage.setItem(\"userId\", response.data.localId);\r\n      dispatch(authSuccess(response.data.idToken, response.data.localId));\r\n      dispatch(checkAuthTimeout(response.data.expiresIn));\r\n    })\r\n    .catch((err) => {\r\n      dispatch(authFail(err.response.data.error));\r\n    });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}