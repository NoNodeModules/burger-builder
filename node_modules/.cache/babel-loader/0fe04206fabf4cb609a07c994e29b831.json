{"ast":null,"code":"import * as actionTypes from \"../actions/actionTypes\";\nconst initialState = {\n  ingredients: null,\n  totalPrice: 4,\n  error: false\n};\nconst INGREDIENT_PRICES = {\n  salad: 0.5,\n  cheese: 0.4,\n  meat: 1.3,\n  bacon: 0.7\n};\n\nconst addIngredient = (state, action) => {\n  const updatedIngredient = {\n    [action.ingredientName]: state.ingredients[action.ingredientName] + 1\n  };\n  const updatedIngredients = updateObject(state.ingredients, updatedIngredient);\n  const updatedState = {\n    ingredients: updatedIngredients,\n    totalPrice: state.totalPrice + INGREDIENT_PRICES[action.ingredientName]\n  };\n  return updateObject(state, updatedState);\n};\n\nconst removeIngredient = (state, action) => {\n  const updatedIng = {\n    [action.ingredientName]: state.ingredients[action.ingredientName] - 1\n  };\n  const updatedIngs = updateObject(state.ingredients, updatedIng);\n  const updatedSt = {\n    ingredients: updatedIngs,\n    totalPrice: state.totalPrice - INGREDIENT_PRICES[action.ingredientName]\n  };\n  return updateObject(state, updatedSt);\n};\n\nconst setIngredients = (state, action) => {\n  return {\n    ingredients: {\n      salad: action.ingredients.salad,\n      bacon: action.ingredients.bacon,\n      cheese: action.ingredients.cheese,\n      meat: action.ingredients.meat\n    },\n    totalPrice: 4,\n    error: false\n  };\n};\n\nconst fetchIngredientsFailed = (state, action) => {\n  return {\n    error: true\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_INGREDIENT:\n      return addIngredient(state, action);\n\n    case actionTypes.REMOVE_INGREDIENT:\n      return removeIngredient(state, action);\n\n    case actionTypes.SET_INGREDIENTS:\n      return setIngredients(state, action);\n\n    case actionTypes.FETCH_INGREDIENTS_FAILED:\n      return fetchIngredientsFailed(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/Natalia/Desktop/React course/burger-builder/src/store/reducers/burgerBuilder.js"],"names":["actionTypes","initialState","ingredients","totalPrice","error","INGREDIENT_PRICES","salad","cheese","meat","bacon","addIngredient","state","action","updatedIngredient","ingredientName","updatedIngredients","updateObject","updatedState","removeIngredient","updatedIng","updatedIngs","updatedSt","setIngredients","fetchIngredientsFailed","reducer","type","ADD_INGREDIENT","REMOVE_INGREDIENT","SET_INGREDIENTS","FETCH_INGREDIENTS_FAILED"],"mappings":"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","sourcesContent":["import * as actionTypes from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n  ingredients: null,\r\n  totalPrice: 4,\r\n  error: false,\r\n};\r\n\r\nconst INGREDIENT_PRICES = {\r\n  salad: 0.5,\r\n  cheese: 0.4,\r\n  meat: 1.3,\r\n  bacon: 0.7,\r\n};\r\n\r\nconst addIngredient = (state, action) => {\r\n  const updatedIngredient = {\r\n    [action.ingredientName]: state.ingredients[action.ingredientName] + 1,\r\n  };\r\n  const updatedIngredients = updateObject(state.ingredients, updatedIngredient);\r\n  const updatedState = {\r\n    ingredients: updatedIngredients,\r\n    totalPrice: state.totalPrice + INGREDIENT_PRICES[action.ingredientName],\r\n  };\r\n  return updateObject(state, updatedState);\r\n};\r\n\r\nconst removeIngredient = (state, action) => {\r\n  const updatedIng = {\r\n    [action.ingredientName]: state.ingredients[action.ingredientName] - 1,\r\n  };\r\n  const updatedIngs = updateObject(state.ingredients, updatedIng);\r\n  const updatedSt = {\r\n    ingredients: updatedIngs,\r\n    totalPrice: state.totalPrice - INGREDIENT_PRICES[action.ingredientName],\r\n  };\r\n  return updateObject(state, updatedSt);\r\n};\r\n\r\nconst setIngredients = (state, action) => {\r\n  return {\r\n    ingredients: {\r\n      salad: action.ingredients.salad,\r\n      bacon: action.ingredients.bacon,\r\n      cheese: action.ingredients.cheese,\r\n      meat: action.ingredients.meat,\r\n    },\r\n    totalPrice: 4,\r\n    error: false,\r\n  };\r\n};\r\n\r\nconst fetchIngredientsFailed = (state, action) => {\r\n  return { error: true };\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.ADD_INGREDIENT:\r\n      return addIngredient(state, action);\r\n    case actionTypes.REMOVE_INGREDIENT:\r\n      return removeIngredient(state, action);\r\n    case actionTypes.SET_INGREDIENTS:\r\n      return setIngredients(state, action);\r\n    case actionTypes.FETCH_INGREDIENTS_FAILED:\r\n      return fetchIngredientsFailed(state, action);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}