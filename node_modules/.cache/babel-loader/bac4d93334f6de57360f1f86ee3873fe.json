{"ast":null,"code":"import * as actionTypes from \"./actionsTypes\";\nimport axios from \"../../axios-orders\";\nexport const purchaseBurgerSuccess = (id, orderData) => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_SUCCESS,\n    orderId: id,\n    orderData: orderData\n  };\n};\nexport const purchaseBurgerFail = error => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_FAIL,\n    error: error\n  };\n};\nexport const purchaseBurgerStart = () => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_START\n  };\n};\nexport const purchaseBurger = orderData => {\n  return dispatch => {\n    dispatch(purchaseBurgerStart());\n    axios.post(\"/orders.json\", orderData).then(response => {\n      console.log(response.data);\n      dispatch(purchaseBurgerSuccess(response.data.name, orderData));\n    }).catch(error => {\n      dispatch(purchaseBurgerFail(error));\n    });\n  };\n};\nexport const purchaseInit = () => {\n  return {\n    type: actionTypes.PURCHASE_INIT\n  };\n};\nexport const fetchOrdersSuccess = orders => {\n  return {\n    type: actionTypes.FETCH_ORDERS_SUCCESS,\n    orders: orders\n  };\n};\nexport const fetchOrdersFail = error => {\n  return {\n    type: actionTypes.FETCH_ORDERS_FAIL,\n    error: error\n  };\n};\nexport const fetchOrdersStart = () => {\n  return {\n    type: actionTypes.FETCH_ORDERS_START\n  };\n};\nexport const fetchOrders = token => {\n  return dispatch => {\n    dispatch(fetchOrdersStart());\n    axios.get(\"/orders.json?auth=\" + token).then(res => {\n      const fetchedOrders = [];\n\n      for (let key in res.data) {\n        fetchedOrders.push({ ...res.data[key],\n          id: key\n        });\n      }\n\n      dispatch(fetchOrdersSuccess(fetchedOrders));\n    }).catch(err => {\n      dispatch(fetchOrdersFail());\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/Natalia/Desktop/React course/burger-builder/src/store/actions/order.js"],"names":["actionTypes","axios","purchaseBurgerSuccess","id","orderData","type","PURCHASE_BURGER_SUCCESS","orderId","purchaseBurgerFail","error","PURCHASE_BURGER_FAIL","purchaseBurgerStart","PURCHASE_BURGER_START","purchaseBurger","dispatch","post","then","response","console","log","data","name","catch","purchaseInit","PURCHASE_INIT","fetchOrdersSuccess","orders","FETCH_ORDERS_SUCCESS","fetchOrdersFail","FETCH_ORDERS_FAIL","fetchOrdersStart","FETCH_ORDERS_START","fetchOrders","token","get","res","fetchedOrders","key","push","err"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,gBAA7B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,OAAO,MAAMC,qBAAqB,GAAG,CAACC,EAAD,EAAKC,SAAL,KAAmB;AACtD,SAAO;AACLC,IAAAA,IAAI,EAAEL,WAAW,CAACM,uBADb;AAELC,IAAAA,OAAO,EAAEJ,EAFJ;AAGLC,IAAAA,SAAS,EAAEA;AAHN,GAAP;AAKD,CANM;AAQP,OAAO,MAAMI,kBAAkB,GAAIC,KAAD,IAAW;AAC3C,SAAO;AACLJ,IAAAA,IAAI,EAAEL,WAAW,CAACU,oBADb;AAELD,IAAAA,KAAK,EAAEA;AAFF,GAAP;AAID,CALM;AAOP,OAAO,MAAME,mBAAmB,GAAG,MAAM;AACvC,SAAO;AACLN,IAAAA,IAAI,EAAEL,WAAW,CAACY;AADb,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMC,cAAc,GAAIT,SAAD,IAAe;AAC3C,SAAQU,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACH,mBAAmB,EAApB,CAAR;AACAV,IAAAA,KAAK,CACFc,IADH,CACQ,cADR,EACwBX,SADxB,EAEGY,IAFH,CAESC,QAAD,IAAc;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB;AACAN,MAAAA,QAAQ,CAACZ,qBAAqB,CAACe,QAAQ,CAACG,IAAT,CAAcC,IAAf,EAAqBjB,SAArB,CAAtB,CAAR;AACD,KALH,EAMGkB,KANH,CAMUb,KAAD,IAAW;AAChBK,MAAAA,QAAQ,CAACN,kBAAkB,CAACC,KAAD,CAAnB,CAAR;AACD,KARH;AASD,GAXD;AAYD,CAbM;AAeP,OAAO,MAAMc,YAAY,GAAG,MAAM;AAChC,SAAO;AACLlB,IAAAA,IAAI,EAAEL,WAAW,CAACwB;AADb,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMC,kBAAkB,GAAIC,MAAD,IAAY;AAC5C,SAAO;AACLrB,IAAAA,IAAI,EAAEL,WAAW,CAAC2B,oBADb;AAELD,IAAAA,MAAM,EAAEA;AAFH,GAAP;AAID,CALM;AAOP,OAAO,MAAME,eAAe,GAAInB,KAAD,IAAW;AACxC,SAAO;AACLJ,IAAAA,IAAI,EAAEL,WAAW,CAAC6B,iBADb;AAELpB,IAAAA,KAAK,EAAEA;AAFF,GAAP;AAID,CALM;AAOP,OAAO,MAAMqB,gBAAgB,GAAG,MAAM;AACpC,SAAO;AACLzB,IAAAA,IAAI,EAAEL,WAAW,CAAC+B;AADb,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAAW;AACpC,SAAQnB,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACgB,gBAAgB,EAAjB,CAAR;AACA7B,IAAAA,KAAK,CACFiC,GADH,CACO,uBAAuBD,KAD9B,EAEGjB,IAFH,CAESmB,GAAD,IAAS;AACb,YAAMC,aAAa,GAAG,EAAtB;;AACA,WAAK,IAAIC,GAAT,IAAgBF,GAAG,CAACf,IAApB,EAA0B;AACxBgB,QAAAA,aAAa,CAACE,IAAd,CAAmB,EACjB,GAAGH,GAAG,CAACf,IAAJ,CAASiB,GAAT,CADc;AAEjBlC,UAAAA,EAAE,EAAEkC;AAFa,SAAnB;AAID;;AACDvB,MAAAA,QAAQ,CAACW,kBAAkB,CAACW,aAAD,CAAnB,CAAR;AACD,KAXH,EAYGd,KAZH,CAYUiB,GAAD,IAAS;AACdzB,MAAAA,QAAQ,CAACc,eAAe,EAAhB,CAAR;AACD,KAdH;AAeD,GAjBD;AAkBD,CAnBM","sourcesContent":["import * as actionTypes from \"./actionsTypes\";\r\nimport axios from \"../../axios-orders\";\r\n\r\nexport const purchaseBurgerSuccess = (id, orderData) => {\r\n  return {\r\n    type: actionTypes.PURCHASE_BURGER_SUCCESS,\r\n    orderId: id,\r\n    orderData: orderData,\r\n  };\r\n};\r\n\r\nexport const purchaseBurgerFail = (error) => {\r\n  return {\r\n    type: actionTypes.PURCHASE_BURGER_FAIL,\r\n    error: error,\r\n  };\r\n};\r\n\r\nexport const purchaseBurgerStart = () => {\r\n  return {\r\n    type: actionTypes.PURCHASE_BURGER_START,\r\n  };\r\n};\r\n\r\nexport const purchaseBurger = (orderData) => {\r\n  return (dispatch) => {\r\n    dispatch(purchaseBurgerStart());\r\n    axios\r\n      .post(\"/orders.json\", orderData)\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        dispatch(purchaseBurgerSuccess(response.data.name, orderData));\r\n      })\r\n      .catch((error) => {\r\n        dispatch(purchaseBurgerFail(error));\r\n      });\r\n  };\r\n};\r\n\r\nexport const purchaseInit = () => {\r\n  return {\r\n    type: actionTypes.PURCHASE_INIT,\r\n  };\r\n};\r\n\r\nexport const fetchOrdersSuccess = (orders) => {\r\n  return {\r\n    type: actionTypes.FETCH_ORDERS_SUCCESS,\r\n    orders: orders,\r\n  };\r\n};\r\n\r\nexport const fetchOrdersFail = (error) => {\r\n  return {\r\n    type: actionTypes.FETCH_ORDERS_FAIL,\r\n    error: error,\r\n  };\r\n};\r\n\r\nexport const fetchOrdersStart = () => {\r\n  return {\r\n    type: actionTypes.FETCH_ORDERS_START,\r\n  };\r\n};\r\n\r\nexport const fetchOrders = (token) => {\r\n  return (dispatch) => {\r\n    dispatch(fetchOrdersStart());\r\n    axios\r\n      .get(\"/orders.json?auth=\" + token)\r\n      .then((res) => {\r\n        const fetchedOrders = [];\r\n        for (let key in res.data) {\r\n          fetchedOrders.push({\r\n            ...res.data[key],\r\n            id: key,\r\n          });\r\n        }\r\n        dispatch(fetchOrdersSuccess(fetchedOrders));\r\n      })\r\n      .catch((err) => {\r\n        dispatch(fetchOrdersFail());\r\n      });\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}