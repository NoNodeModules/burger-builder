{"ast":null,"code":"import * as actionTypes from \"./actionsTypes\";\nimport axios from \"axios\";\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = (token, userId) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    idToken: token,\n    userId: userId\n  };\n};\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\nexport const logout = () => {\n  // localStorage.removeItem(\"token\");\n  // localStorage.removeItem(\"expirationDate\");\n  // localStorage.removeItem(\"userId\");\n  return {\n    type: actionTypes.AUTH_INITIATE_LOGOUT\n  };\n};\nexport const logoutSucceed = () => {\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const checkAuthTimeout = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\nexport const auth = (email, password, isSignup) => {\n  return dispatch => {\n    dispatch(authStart());\n    const authData = {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    };\n    let url = \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBosroe0LInumqEwQN-h9YJMNXqhpPJR7s\";\n\n    if (!isSignup) {\n      url = \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBosroe0LInumqEwQN-h9YJMNXqhpPJR7s\";\n    }\n\n    axios.post(url, authData).then(response => {\n      const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);\n      localStorage.setItem(\"token\", response.data.idToken);\n      localStorage.setItem(\"expirationDate\", expirationDate);\n      localStorage.setItem(\"userId\", response.data.localId);\n      dispatch(authSuccess(response.data.idToken, response.data.localId));\n      dispatch(checkAuthTimeout(response.data.expiresIn));\n    }).catch(err => {\n      dispatch(authFail(err.response.data.error));\n    });\n  };\n};\nexport const setAuthRedirectPath = path => {\n  return {\n    type: actionTypes.SET_AUTH_REDIRECT_PATH,\n    path: path\n  };\n};\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem(\"token\");\n\n    if (!token) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem(\"expirationDate\"));\n\n      if (expirationDate <= new Date()) {\n        dispatch(logout());\n      } else {\n        const userId = localStorage.getItem(\"userId\");\n        dispatch(authSuccess(token, userId));\n        dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n      }\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/Natalia/Desktop/React course/burger-builder/src/store/actions/auth.js"],"names":["actionTypes","axios","authStart","type","AUTH_START","authSuccess","token","userId","AUTH_SUCCESS","idToken","authFail","error","AUTH_FAIL","logout","AUTH_INITIATE_LOGOUT","logoutSucceed","AUTH_LOGOUT","checkAuthTimeout","expirationTime","dispatch","setTimeout","auth","email","password","isSignup","authData","returnSecureToken","url","post","then","response","expirationDate","Date","getTime","data","expiresIn","localStorage","setItem","localId","catch","err","setAuthRedirectPath","path","SET_AUTH_REDIRECT_PATH","authCheckState","getItem"],"mappings":"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","sourcesContent":["import * as actionTypes from \"./actionsTypes\";\r\nimport axios from \"axios\";\r\n\r\nexport const authStart = () => {\r\n  return {\r\n    type: actionTypes.AUTH_START,\r\n  };\r\n};\r\n\r\nexport const authSuccess = (token, userId) => {\r\n  return {\r\n    type: actionTypes.AUTH_SUCCESS,\r\n    idToken: token,\r\n    userId: userId,\r\n  };\r\n};\r\n\r\nexport const authFail = (error) => {\r\n  return {\r\n    type: actionTypes.AUTH_FAIL,\r\n    error: error,\r\n  };\r\n};\r\n\r\nexport const logout = () => {\r\n  // localStorage.removeItem(\"token\");\r\n  // localStorage.removeItem(\"expirationDate\");\r\n  // localStorage.removeItem(\"userId\");\r\n\r\n  return {\r\n    type: actionTypes.AUTH_INITIATE_LOGOUT,\r\n  };\r\n};\r\n\r\nexport const logoutSucceed = () => {\r\n  return {\r\n    type: actionTypes.AUTH_LOGOUT,\r\n  };\r\n};\r\n\r\nexport const checkAuthTimeout = (expirationTime) => {\r\n  return (dispatch) => {\r\n    setTimeout(() => {\r\n      dispatch(logout());\r\n    }, expirationTime * 1000);\r\n  };\r\n};\r\n\r\nexport const auth = (email, password, isSignup) => {\r\n  return (dispatch) => {\r\n    dispatch(authStart());\r\n    const authData = {\r\n      email: email,\r\n      password: password,\r\n      returnSecureToken: true,\r\n    };\r\n    let url =\r\n      \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBosroe0LInumqEwQN-h9YJMNXqhpPJR7s\";\r\n    if (!isSignup) {\r\n      url =\r\n        \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBosroe0LInumqEwQN-h9YJMNXqhpPJR7s\";\r\n    }\r\n    axios\r\n      .post(url, authData)\r\n      .then((response) => {\r\n        const expirationDate = new Date(\r\n          new Date().getTime() + response.data.expiresIn * 1000\r\n        );\r\n        localStorage.setItem(\"token\", response.data.idToken);\r\n        localStorage.setItem(\"expirationDate\", expirationDate);\r\n        localStorage.setItem(\"userId\", response.data.localId);\r\n        dispatch(authSuccess(response.data.idToken, response.data.localId));\r\n        dispatch(checkAuthTimeout(response.data.expiresIn));\r\n      })\r\n      .catch((err) => {\r\n        dispatch(authFail(err.response.data.error));\r\n      });\r\n  };\r\n};\r\n\r\nexport const setAuthRedirectPath = (path) => {\r\n  return {\r\n    type: actionTypes.SET_AUTH_REDIRECT_PATH,\r\n    path: path,\r\n  };\r\n};\r\n\r\nexport const authCheckState = () => {\r\n  return (dispatch) => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (!token) {\r\n      dispatch(logout());\r\n    } else {\r\n      const expirationDate = new Date(localStorage.getItem(\"expirationDate\"));\r\n      if (expirationDate <= new Date()) {\r\n        dispatch(logout());\r\n      } else {\r\n        const userId = localStorage.getItem(\"userId\");\r\n        dispatch(authSuccess(token, userId));\r\n        dispatch(\r\n          checkAuthTimeout(\r\n            (expirationDate.getTime() - new Date().getTime()) / 1000\r\n          )\r\n        );\r\n      }\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}