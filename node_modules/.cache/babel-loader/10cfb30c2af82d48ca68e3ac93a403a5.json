{"ast":null,"code":"import * as actionTypes from \"../actions/actionsTypes\";\nimport { updateObject } from \"../utility\";\nconst initialState = {\n  ingredients: null,\n  totalPrice: 4,\n  error: false\n};\nconst INGREDIENT_PRICES = {\n  salad: 0.5,\n  cheese: 0.4,\n  meat: 1.3,\n  bacon: 0.7\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_INGREDIENT:\n      const updatedIngredient = {\n        [action.ingredientName]: state.ingredients[action.ingredientName] + 1\n      };\n      const updatedIngredients = updateObject(state.ingredients, updatedIngredient);\n      const updatedState = {\n        ingredients: updatedIngredients,\n        totalPrice: state.totalPrice + INGREDIENT_PRICES[action.ingredientName]\n      };\n      return updateObject(state, updatedState);\n\n    case actionTypes.REMOVE_INGREDIENT:\n      const updatedIng = {\n        [action.ingredientName]: state.ingredients[action.ingredientName] - 1\n      };\n      const updatedIngs = updateObject(state.ingredients, updatedIng);\n      const updatedSt = {\n        ingredients: updatedIngs,\n        totalPrice: state.totalPrice + INGREDIENT_PRICES[action.ingredientName]\n      };\n      return updateObject(state, updatedSt);\n\n    case actionTypes.SET_INGREDIENTS:\n      return updateObject(state, {\n        ingredients: {\n          salad: action.ingredients.salad,\n          bacon: action.ingredients.bacon,\n          cheese: action.ingredients.cheese,\n          meat: action.ingredients.meat\n        },\n        totalPrice: 4,\n        error: false\n      });\n\n    case actionTypes.FETCH_INGREDIENTS_FAILED:\n      return updateObject(state, {\n        error: true\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/Natalia/Desktop/React course/burger-builder/src/store/reducers/burgerBuilder.js"],"names":["actionTypes","updateObject","initialState","ingredients","totalPrice","error","INGREDIENT_PRICES","salad","cheese","meat","bacon","reducer","state","action","type","ADD_INGREDIENT","updatedIngredient","ingredientName","updatedIngredients","updatedState","REMOVE_INGREDIENT","updatedIng","updatedIngs","updatedSt","SET_INGREDIENTS","FETCH_INGREDIENTS_FAILED"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,yBAA7B;AACA,SAASC,YAAT,QAA6B,YAA7B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,WAAW,EAAE,IADM;AAEnBC,EAAAA,UAAU,EAAE,CAFO;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB;AAMA,MAAMC,iBAAiB,GAAG;AACxBC,EAAAA,KAAK,EAAE,GADiB;AAExBC,EAAAA,MAAM,EAAE,GAFgB;AAGxBC,EAAAA,IAAI,EAAE,GAHkB;AAIxBC,EAAAA,KAAK,EAAE;AAJiB,CAA1B;;AAOA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGV,YAAT,EAAuBW,MAAvB,KAAkC;AAChD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKd,WAAW,CAACe,cAAjB;AACE,YAAMC,iBAAiB,GAAG;AACxB,SAACH,MAAM,CAACI,cAAR,GAAyBL,KAAK,CAACT,WAAN,CAAkBU,MAAM,CAACI,cAAzB,IAA2C;AAD5C,OAA1B;AAGA,YAAMC,kBAAkB,GAAGjB,YAAY,CACrCW,KAAK,CAACT,WAD+B,EAErCa,iBAFqC,CAAvC;AAIA,YAAMG,YAAY,GAAG;AACnBhB,QAAAA,WAAW,EAAEe,kBADM;AAEnBd,QAAAA,UAAU,EAAEQ,KAAK,CAACR,UAAN,GAAmBE,iBAAiB,CAACO,MAAM,CAACI,cAAR;AAF7B,OAArB;AAIA,aAAOhB,YAAY,CAACW,KAAD,EAAQO,YAAR,CAAnB;;AACF,SAAKnB,WAAW,CAACoB,iBAAjB;AACE,YAAMC,UAAU,GAAG;AACjB,SAACR,MAAM,CAACI,cAAR,GAAyBL,KAAK,CAACT,WAAN,CAAkBU,MAAM,CAACI,cAAzB,IAA2C;AADnD,OAAnB;AAGA,YAAMK,WAAW,GAAGrB,YAAY,CAACW,KAAK,CAACT,WAAP,EAAoBkB,UAApB,CAAhC;AACA,YAAME,SAAS,GAAG;AAChBpB,QAAAA,WAAW,EAAEmB,WADG;AAEhBlB,QAAAA,UAAU,EAAEQ,KAAK,CAACR,UAAN,GAAmBE,iBAAiB,CAACO,MAAM,CAACI,cAAR;AAFhC,OAAlB;AAIA,aAAOhB,YAAY,CAACW,KAAD,EAAQW,SAAR,CAAnB;;AACF,SAAKvB,WAAW,CAACwB,eAAjB;AACE,aAAOvB,YAAY,CAACW,KAAD,EAAQ;AACzBT,QAAAA,WAAW,EAAE;AACXI,UAAAA,KAAK,EAAEM,MAAM,CAACV,WAAP,CAAmBI,KADf;AAEXG,UAAAA,KAAK,EAAEG,MAAM,CAACV,WAAP,CAAmBO,KAFf;AAGXF,UAAAA,MAAM,EAAEK,MAAM,CAACV,WAAP,CAAmBK,MAHhB;AAIXC,UAAAA,IAAI,EAAEI,MAAM,CAACV,WAAP,CAAmBM;AAJd,SADY;AAOzBL,QAAAA,UAAU,EAAE,CAPa;AAQzBC,QAAAA,KAAK,EAAE;AARkB,OAAR,CAAnB;;AAUF,SAAKL,WAAW,CAACyB,wBAAjB;AACE,aAAOxB,YAAY,CAACW,KAAD,EAAQ;AAAEP,QAAAA,KAAK,EAAE;AAAT,OAAR,CAAnB;;AACF;AACE,aAAOO,KAAP;AAtCJ;AAwCD,CAzCD;;AA2CA,eAAeD,OAAf","sourcesContent":["import * as actionTypes from \"../actions/actionsTypes\";\r\nimport { updateObject } from \"../utility\";\r\n\r\nconst initialState = {\r\n  ingredients: null,\r\n  totalPrice: 4,\r\n  error: false,\r\n};\r\n\r\nconst INGREDIENT_PRICES = {\r\n  salad: 0.5,\r\n  cheese: 0.4,\r\n  meat: 1.3,\r\n  bacon: 0.7,\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.ADD_INGREDIENT:\r\n      const updatedIngredient = {\r\n        [action.ingredientName]: state.ingredients[action.ingredientName] + 1,\r\n      };\r\n      const updatedIngredients = updateObject(\r\n        state.ingredients,\r\n        updatedIngredient\r\n      );\r\n      const updatedState = {\r\n        ingredients: updatedIngredients,\r\n        totalPrice: state.totalPrice + INGREDIENT_PRICES[action.ingredientName],\r\n      };\r\n      return updateObject(state, updatedState);\r\n    case actionTypes.REMOVE_INGREDIENT:\r\n      const updatedIng = {\r\n        [action.ingredientName]: state.ingredients[action.ingredientName] - 1,\r\n      };\r\n      const updatedIngs = updateObject(state.ingredients, updatedIng);\r\n      const updatedSt = {\r\n        ingredients: updatedIngs,\r\n        totalPrice: state.totalPrice + INGREDIENT_PRICES[action.ingredientName],\r\n      };\r\n      return updateObject(state, updatedSt);\r\n    case actionTypes.SET_INGREDIENTS:\r\n      return updateObject(state, {\r\n        ingredients: {\r\n          salad: action.ingredients.salad,\r\n          bacon: action.ingredients.bacon,\r\n          cheese: action.ingredients.cheese,\r\n          meat: action.ingredients.meat,\r\n        },\r\n        totalPrice: 4,\r\n        error: false,\r\n      });\r\n    case actionTypes.FETCH_INGREDIENTS_FAILED:\r\n      return updateObject(state, { error: true });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}