{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Natalia\\\\Desktop\\\\React course\\\\burger-builder\\\\src\\\\containers\\\\Checkout\\\\ContactData\\\\ContactData.js\";\nimport React from \"react\";\nimport Button from \"../../../components/UI/Button/Button\";\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\nimport Input from \"../../../components/UI/Input/Input\";\nimport classes from \"./ContactData.module.css\";\nimport axios from \"../../../axios-orders\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ContactData extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Your Name\"\n          },\n          value: \"\"\n        },\n        street: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Street\"\n          },\n          value: \"\"\n        },\n        zipCode: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"ZIP Code\"\n          },\n          value: \"\"\n        },\n        country: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Country\"\n          },\n          value: \"\"\n        },\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            placeholder: \"Your E-Mail\"\n          },\n          value: \"\"\n        },\n        deliveryMethod: {\n          elementType: \"select\",\n          elementConfig: {\n            options: [{\n              value: \"fastest\",\n              displayValue: \"Fastest\"\n            }, {\n              value: \"cheapest\",\n              displayValue: \"Cheapest\"\n            }]\n          },\n          value: \"\"\n        }\n      },\n      loading: false\n    };\n\n    this.orderHandler = event => {\n      event.preventDefault();\n      this.setState({\n        loading: true\n      });\n      const formData = {};\n\n      for (let formElementIdentifier in this.state.orderForm) {\n        formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n      }\n\n      const order = {\n        ingredients: this.props.ingredients,\n        price: this.props.price,\n        orderData: formData\n      };\n      axios.post(\"/orders.json\", order).then(response => {\n        this.setState({\n          loading: false\n        });\n        this.props.history.push(\"/\");\n      }).catch(error => this.setState({\n        loading: false\n      }));\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      // clone the form object\n      const updatedOrderForm = { ...this.state.orderForm\n      }; // deeply clone the object inside object\n\n      const updatedFormElement = { ...updatedOrderForm[inputIdentifier]\n      };\n      updatedFormElement.value = event.target.value;\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n      this.setState({\n        orderForm: updatedOrderForm\n      });\n    };\n  }\n\n  render() {\n    const formElementArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.orderHandler,\n      children: [formElementArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n        elementType: formElement.config.elementType,\n        elementConfig: formElement.config.elementConfig,\n        value: formElement.config.value,\n        changed: event => this.inputChangedHandler(event, formElement.id)\n      }, formElement.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(Button, {\n        btnType: \"Success\",\n        children: \"ORDER\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this);\n\n    if (this.state.loading) {\n      form = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.ContactData,\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Enter your contact data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), form]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default ContactData;","map":{"version":3,"sources":["C:/Users/Natalia/Desktop/React course/burger-builder/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Button","Spinner","Input","classes","axios","ContactData","Component","state","orderForm","name","elementType","elementConfig","type","placeholder","value","street","zipCode","country","email","deliveryMethod","options","displayValue","loading","orderHandler","event","preventDefault","setState","formData","formElementIdentifier","order","ingredients","props","price","orderData","post","then","response","history","push","catch","error","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","render","formElementArray","key","id","config","form","map","formElement"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Button from \"../../../components/UI/Button/Button\";\r\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\r\nimport Input from \"../../../components/UI/Input/Input\";\r\nimport classes from \"./ContactData.module.css\";\r\nimport axios from \"../../../axios-orders\";\r\n\r\nclass ContactData extends React.Component {\r\n  state = {\r\n    orderForm: {\r\n      name: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Your Name\",\r\n        },\r\n        value: \"\",\r\n      },\r\n      street: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Street\",\r\n        },\r\n        value: \"\",\r\n      },\r\n      zipCode: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"ZIP Code\",\r\n        },\r\n        value: \"\",\r\n      },\r\n      country: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Country\",\r\n        },\r\n        value: \"\",\r\n      },\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Your E-Mail\",\r\n        },\r\n        value: \"\",\r\n      },\r\n      deliveryMethod: {\r\n        elementType: \"select\",\r\n        elementConfig: {\r\n          options: [\r\n            { value: \"fastest\", displayValue: \"Fastest\" },\r\n            { value: \"cheapest\", displayValue: \"Cheapest\" },\r\n          ],\r\n        },\r\n        value: \"\",\r\n      },\r\n    },\r\n    loading: false,\r\n  };\r\n  orderHandler = (event) => {\r\n    event.preventDefault();\r\n    this.setState({ loading: true });\r\n    const formData = {};\r\n    for (let formElementIdentifier in this.state.orderForm) {\r\n      formData[formElementIdentifier] = this.state.orderForm[\r\n        formElementIdentifier\r\n      ].value;\r\n    }\r\n    const order = {\r\n      ingredients: this.props.ingredients,\r\n      price: this.props.price,\r\n      orderData: formData,\r\n    };\r\n    axios\r\n      .post(\"/orders.json\", order)\r\n      .then((response) => {\r\n        this.setState({ loading: false });\r\n        this.props.history.push(\"/\");\r\n      })\r\n      .catch((error) => this.setState({ loading: false }));\r\n  };\r\n\r\n  inputChangedHandler = (event, inputIdentifier) => {\r\n    // clone the form object\r\n    const updatedOrderForm = {\r\n      ...this.state.orderForm,\r\n    };\r\n    // deeply clone the object inside object\r\n    const updatedFormElement = {\r\n      ...updatedOrderForm[inputIdentifier],\r\n    };\r\n    updatedFormElement.value = event.target.value;\r\n    updatedOrderForm[inputIdentifier] = updatedFormElement;\r\n    this.setState({ orderForm: updatedOrderForm });\r\n  };\r\n\r\n  render() {\r\n    const formElementArray = [];\r\n    for (let key in this.state.orderForm) {\r\n      formElementArray.push({\r\n        id: key,\r\n        config: this.state.orderForm[key],\r\n      });\r\n    }\r\n    let form = (\r\n      <form onSubmit={this.orderHandler}>\r\n        {formElementArray.map((formElement) => (\r\n          <Input\r\n            key={formElement.id}\r\n            elementType={formElement.config.elementType}\r\n            elementConfig={formElement.config.elementConfig}\r\n            value={formElement.config.value}\r\n            changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n          />\r\n        ))}\r\n        <Button btnType=\"Success\">ORDER</Button>\r\n      </form>\r\n    );\r\n    if (this.state.loading) {\r\n      form = <Spinner />;\r\n    }\r\n    return (\r\n      <div className={classes.ContactData}>\r\n        <h4>Enter your contact data</h4>\r\n        {form}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactData;\r\n"]},"metadata":{},"sourceType":"module"}