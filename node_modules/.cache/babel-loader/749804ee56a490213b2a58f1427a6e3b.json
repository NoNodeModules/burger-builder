{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Natalia\\\\Desktop\\\\React course\\\\burger-builder\\\\src\\\\containers\\\\Auth\\\\Auth.js\";\nimport React, { Component } from \"react\";\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\nimport classes from \"./Auth.module.css\";\nimport * as actions from \"../../store/actions/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            placeholder: \"Mail Address\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: \"password\",\n          elementConfig: {\n            type: \"password\",\n            placeholder: \"Password\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      }\n    };\n\n    this.inputChangedHandler = (event, controlName) => {\n      const updatedControls = { ...this.state.controls,\n        [controlName]: { ...this.state.controls[controlName],\n          value: event.target.value,\n          valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n          touched: true\n        }\n      };\n      this.setState({\n        controls: updatedControls\n      });\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== \"\" && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    const form = formElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id)\n    }, formElement.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.Auth,\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [form, /*#__PURE__*/_jsxDEV(Button, {\n          btnType: \"Success\",\n          children: \"SUBMIT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: () => dispatch(actions.auth())\n  };\n};\n\nexport default Auth;","map":{"version":3,"sources":["C:/Users/Natalia/Desktop/React course/burger-builder/src/containers/Auth/Auth.js"],"names":["React","Component","Input","Button","classes","actions","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","inputChangedHandler","event","controlName","updatedControls","target","checkValidity","setState","rules","isValid","trim","length","maxLength","pattern","test","isNumeric","render","formElementsArray","key","push","id","config","form","map","formElement","mapDispatchToProps","dispatch","onAuth","auth"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport classes from \"./Auth.module.css\";\r\nimport * as actions from \"../../store/actions/index\";\r\n\r\nclass Auth extends Component {\r\n  state = {\r\n    controls: {\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Mail Address\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          isEmail: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      password: {\r\n        elementType: \"password\",\r\n        elementConfig: {\r\n          type: \"password\",\r\n          placeholder: \"Password\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 6,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n    },\r\n  };\r\n  checkValidity(value, rules) {\r\n    let isValid = true;\r\n    if (!rules) {\r\n      return true;\r\n    }\r\n\r\n    if (rules.required) {\r\n      isValid = value.trim() !== \"\" && isValid;\r\n    }\r\n\r\n    if (rules.minLength) {\r\n      isValid = value.length >= rules.minLength && isValid;\r\n    }\r\n\r\n    if (rules.maxLength) {\r\n      isValid = value.length <= rules.maxLength && isValid;\r\n    }\r\n\r\n    if (rules.isEmail) {\r\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n      isValid = pattern.test(value) && isValid;\r\n    }\r\n\r\n    if (rules.isNumeric) {\r\n      const pattern = /^\\d+$/;\r\n      isValid = pattern.test(value) && isValid;\r\n    }\r\n\r\n    return isValid;\r\n  }\r\n\r\n  inputChangedHandler = (event, controlName) => {\r\n    const updatedControls = {\r\n      ...this.state.controls,\r\n      [controlName]: {\r\n        ...this.state.controls[controlName],\r\n        value: event.target.value,\r\n        valid: this.checkValidity(\r\n          event.target.value,\r\n          this.state.controls[controlName].validation\r\n        ),\r\n        touched: true,\r\n      },\r\n    };\r\n    this.setState({ controls: updatedControls });\r\n  };\r\n  render() {\r\n    const formElementsArray = [];\r\n    for (let key in this.state.controls) {\r\n      formElementsArray.push({\r\n        id: key,\r\n        config: this.state.controls[key],\r\n      });\r\n    }\r\n\r\n    const form = formElementsArray.map((formElement) => (\r\n      <Input\r\n        key={formElement.id}\r\n        elementType={formElement.config.elementType}\r\n        elementConfig={formElement.config.elementConfig}\r\n        value={formElement.config.value}\r\n        invalid={!formElement.config.valid}\r\n        shouldValidate={formElement.config.validation}\r\n        touched={formElement.config.touched}\r\n        changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n      />\r\n    ));\r\n    return (\r\n      <div className={classes.Auth}>\r\n        <form>\r\n          {form}\r\n          <Button btnType=\"Success\">SUBMIT</Button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAuth: () => dispatch(actions.auth()),\r\n  };\r\n};\r\nexport default Auth;\r\n"]},"metadata":{},"sourceType":"module"}