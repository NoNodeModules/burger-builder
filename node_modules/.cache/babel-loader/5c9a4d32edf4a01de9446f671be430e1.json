{"ast":null,"code":"import { put } from \"redux-saga/effects\";\nimport axios from \"../../axios-orders\";\nimport * as actions from \"../actions\";\nexport function* purchaseBurgerSaga(action) {\n  yield put(actions.purchaseBurgerStart());\n\n  try {\n    const response = yield axios.post(\"/orders.json?auth=\" + action.token, action.orderData);\n    yield put(actions.purchaseBurgerSuccess(response.data.name, action.orderData));\n  } catch (error) {\n    yield put(actions.purchaseBurgerFail(error));\n  }\n}\nexport function* fetchOrdersSaga(action) {\n  yield put(actions.fetchOrdersStart());\n  const queryParams = `?auth=${action.token}&orderBy=\"userId\"&equalTo=\"${action.userId}\"`;\n\n  try {\n    const response = yield axios.get(`/orders.json${queryParams}`);\n    const fetchedOrders = [];\n\n    for (let key in response.data) {\n      fetchedOrders.push({ ...response.data[key],\n        id: key\n      });\n    }\n\n    yield put(actions.fetchOrdersSuccess(fetchedOrders));\n  } catch (error) {\n    yield put(actions.fetchOrdersFail());\n  }\n}","map":{"version":3,"sources":["C:/Users/Natalia/Desktop/React course/burger-builder/src/store/sagas/order.js"],"names":["put","axios","actions","purchaseBurgerSaga","action","purchaseBurgerStart","response","post","token","orderData","purchaseBurgerSuccess","data","name","error","purchaseBurgerFail","fetchOrdersSaga","fetchOrdersStart","queryParams","userId","get","fetchedOrders","key","push","id","fetchOrdersSuccess","fetchOrdersFail"],"mappings":"AAAA,SAASA,GAAT,QAAoB,oBAApB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAO,KAAKC,OAAZ,MAAyB,YAAzB;AAEA,OAAO,UAAUC,kBAAV,CAA6BC,MAA7B,EAAqC;AAC1C,QAAMJ,GAAG,CAACE,OAAO,CAACG,mBAAR,EAAD,CAAT;;AACA,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAN,CACrB,uBAAuBH,MAAM,CAACI,KADT,EAErBJ,MAAM,CAACK,SAFc,CAAvB;AAIA,UAAMT,GAAG,CACPE,OAAO,CAACQ,qBAAR,CAA8BJ,QAAQ,CAACK,IAAT,CAAcC,IAA5C,EAAkDR,MAAM,CAACK,SAAzD,CADO,CAAT;AAGD,GARD,CAQE,OAAOI,KAAP,EAAc;AACd,UAAMb,GAAG,CAACE,OAAO,CAACY,kBAAR,CAA2BD,KAA3B,CAAD,CAAT;AACD;AACF;AAED,OAAO,UAAUE,eAAV,CAA0BX,MAA1B,EAAkC;AACvC,QAAMJ,GAAG,CAACE,OAAO,CAACc,gBAAR,EAAD,CAAT;AACA,QAAMC,WAAW,GAAI,SAAQb,MAAM,CAACI,KAAM,8BAA6BJ,MAAM,CAACc,MAAO,GAArF;;AACA,MAAI;AACF,UAAMZ,QAAQ,GAAG,MAAML,KAAK,CAACkB,GAAN,CAAW,eAAcF,WAAY,EAArC,CAAvB;AACA,UAAMG,aAAa,GAAG,EAAtB;;AACA,SAAK,IAAIC,GAAT,IAAgBf,QAAQ,CAACK,IAAzB,EAA+B;AAC7BS,MAAAA,aAAa,CAACE,IAAd,CAAmB,EACjB,GAAGhB,QAAQ,CAACK,IAAT,CAAcU,GAAd,CADc;AAEjBE,QAAAA,EAAE,EAAEF;AAFa,OAAnB;AAID;;AACD,UAAMrB,GAAG,CAACE,OAAO,CAACsB,kBAAR,CAA2BJ,aAA3B,CAAD,CAAT;AACD,GAVD,CAUE,OAAOP,KAAP,EAAc;AACd,UAAMb,GAAG,CAACE,OAAO,CAACuB,eAAR,EAAD,CAAT;AACD;AACF","sourcesContent":["import { put } from \"redux-saga/effects\";\r\nimport axios from \"../../axios-orders\";\r\nimport * as actions from \"../actions\";\r\n\r\nexport function* purchaseBurgerSaga(action) {\r\n  yield put(actions.purchaseBurgerStart());\r\n  try {\r\n    const response = yield axios.post(\r\n      \"/orders.json?auth=\" + action.token,\r\n      action.orderData\r\n    );\r\n    yield put(\r\n      actions.purchaseBurgerSuccess(response.data.name, action.orderData)\r\n    );\r\n  } catch (error) {\r\n    yield put(actions.purchaseBurgerFail(error));\r\n  }\r\n}\r\n\r\nexport function* fetchOrdersSaga(action) {\r\n  yield put(actions.fetchOrdersStart());\r\n  const queryParams = `?auth=${action.token}&orderBy=\"userId\"&equalTo=\"${action.userId}\"`;\r\n  try {\r\n    const response = yield axios.get(`/orders.json${queryParams}`);\r\n    const fetchedOrders = [];\r\n    for (let key in response.data) {\r\n      fetchedOrders.push({\r\n        ...response.data[key],\r\n        id: key,\r\n      });\r\n    }\r\n    yield put(actions.fetchOrdersSuccess(fetchedOrders));\r\n  } catch (error) {\r\n    yield put(actions.fetchOrdersFail());\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}