{"ast":null,"code":"import * as actionTypes from \"./actionsTypes\";\nexport const purchaseBurgerSuccess = (id, orderData) => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_SUCCESS,\n    orderId: id,\n    orderData: orderData\n  };\n};\nexport const purchaseBurgerFail = error => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_FAIL,\n    error: error\n  };\n};\nexport const purchaseBurgerStart = () => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_START\n  };\n};\nexport const purchaseBurger = (orderData, token) => {\n  return {\n    type: actionTypes.PURCHASE_BURGER,\n    orderData,\n    token\n  };\n};\nexport const purchaseInit = () => {\n  return {\n    type: actionTypes.PURCHASE_INIT\n  };\n};\nexport const fetchOrdersSuccess = orders => {\n  return {\n    type: actionTypes.FETCH_ORDERS_SUCCESS,\n    orders: orders\n  };\n};\nexport const fetchOrdersFail = error => {\n  return {\n    type: actionTypes.FETCH_ORDERS_FAIL,\n    error: error\n  };\n};\nexport const fetchOrdersStart = () => {\n  return {\n    type: actionTypes.FETCH_ORDERS_START\n  };\n};\nexport const fetchOrders = (token, userId) => {\n  return dispatch => {\n    dispatch(fetchOrdersStart());\n    const queryParams = `?auth=${token}&orderBy=\"userId\"&equalTo=\"${userId}\"`;\n    axios.get(`/orders.json${queryParams}`).then(res => {\n      const fetchedOrders = [];\n\n      for (let key in res.data) {\n        fetchedOrders.push({ ...res.data[key],\n          id: key\n        });\n      }\n\n      dispatch(fetchOrdersSuccess(fetchedOrders));\n    }).catch(err => {\n      dispatch(fetchOrdersFail());\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/Natalia/Desktop/React course/burger-builder/src/store/actions/order.js"],"names":["actionTypes","purchaseBurgerSuccess","id","orderData","type","PURCHASE_BURGER_SUCCESS","orderId","purchaseBurgerFail","error","PURCHASE_BURGER_FAIL","purchaseBurgerStart","PURCHASE_BURGER_START","purchaseBurger","token","PURCHASE_BURGER","purchaseInit","PURCHASE_INIT","fetchOrdersSuccess","orders","FETCH_ORDERS_SUCCESS","fetchOrdersFail","FETCH_ORDERS_FAIL","fetchOrdersStart","FETCH_ORDERS_START","fetchOrders","userId","dispatch","queryParams","axios","get","then","res","fetchedOrders","key","data","push","catch","err"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,gBAA7B;AAEA,OAAO,MAAMC,qBAAqB,GAAG,CAACC,EAAD,EAAKC,SAAL,KAAmB;AACtD,SAAO;AACLC,IAAAA,IAAI,EAAEJ,WAAW,CAACK,uBADb;AAELC,IAAAA,OAAO,EAAEJ,EAFJ;AAGLC,IAAAA,SAAS,EAAEA;AAHN,GAAP;AAKD,CANM;AAQP,OAAO,MAAMI,kBAAkB,GAAIC,KAAD,IAAW;AAC3C,SAAO;AACLJ,IAAAA,IAAI,EAAEJ,WAAW,CAACS,oBADb;AAELD,IAAAA,KAAK,EAAEA;AAFF,GAAP;AAID,CALM;AAOP,OAAO,MAAME,mBAAmB,GAAG,MAAM;AACvC,SAAO;AACLN,IAAAA,IAAI,EAAEJ,WAAW,CAACW;AADb,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMC,cAAc,GAAG,CAACT,SAAD,EAAYU,KAAZ,KAAsB;AAClD,SAAO;AACLT,IAAAA,IAAI,EAAEJ,WAAW,CAACc,eADb;AAELX,IAAAA,SAFK;AAGLU,IAAAA;AAHK,GAAP;AAKD,CANM;AAQP,OAAO,MAAME,YAAY,GAAG,MAAM;AAChC,SAAO;AACLX,IAAAA,IAAI,EAAEJ,WAAW,CAACgB;AADb,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMC,kBAAkB,GAAIC,MAAD,IAAY;AAC5C,SAAO;AACLd,IAAAA,IAAI,EAAEJ,WAAW,CAACmB,oBADb;AAELD,IAAAA,MAAM,EAAEA;AAFH,GAAP;AAID,CALM;AAOP,OAAO,MAAME,eAAe,GAAIZ,KAAD,IAAW;AACxC,SAAO;AACLJ,IAAAA,IAAI,EAAEJ,WAAW,CAACqB,iBADb;AAELb,IAAAA,KAAK,EAAEA;AAFF,GAAP;AAID,CALM;AAOP,OAAO,MAAMc,gBAAgB,GAAG,MAAM;AACpC,SAAO;AACLlB,IAAAA,IAAI,EAAEJ,WAAW,CAACuB;AADb,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMC,WAAW,GAAG,CAACX,KAAD,EAAQY,MAAR,KAAmB;AAC5C,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACJ,gBAAgB,EAAjB,CAAR;AACA,UAAMK,WAAW,GAAI,SAAQd,KAAM,8BAA6BY,MAAO,GAAvE;AACAG,IAAAA,KAAK,CACFC,GADH,CACQ,eAAcF,WAAY,EADlC,EAEGG,IAFH,CAESC,GAAD,IAAS;AACb,YAAMC,aAAa,GAAG,EAAtB;;AACA,WAAK,IAAIC,GAAT,IAAgBF,GAAG,CAACG,IAApB,EAA0B;AACxBF,QAAAA,aAAa,CAACG,IAAd,CAAmB,EACjB,GAAGJ,GAAG,CAACG,IAAJ,CAASD,GAAT,CADc;AAEjB/B,UAAAA,EAAE,EAAE+B;AAFa,SAAnB;AAID;;AACDP,MAAAA,QAAQ,CAACT,kBAAkB,CAACe,aAAD,CAAnB,CAAR;AACD,KAXH,EAYGI,KAZH,CAYUC,GAAD,IAAS;AACdX,MAAAA,QAAQ,CAACN,eAAe,EAAhB,CAAR;AACD,KAdH;AAeD,GAlBD;AAmBD,CApBM","sourcesContent":["import * as actionTypes from \"./actionsTypes\";\r\n\r\nexport const purchaseBurgerSuccess = (id, orderData) => {\r\n  return {\r\n    type: actionTypes.PURCHASE_BURGER_SUCCESS,\r\n    orderId: id,\r\n    orderData: orderData,\r\n  };\r\n};\r\n\r\nexport const purchaseBurgerFail = (error) => {\r\n  return {\r\n    type: actionTypes.PURCHASE_BURGER_FAIL,\r\n    error: error,\r\n  };\r\n};\r\n\r\nexport const purchaseBurgerStart = () => {\r\n  return {\r\n    type: actionTypes.PURCHASE_BURGER_START,\r\n  };\r\n};\r\n\r\nexport const purchaseBurger = (orderData, token) => {\r\n  return {\r\n    type: actionTypes.PURCHASE_BURGER,\r\n    orderData,\r\n    token,\r\n  };\r\n};\r\n\r\nexport const purchaseInit = () => {\r\n  return {\r\n    type: actionTypes.PURCHASE_INIT,\r\n  };\r\n};\r\n\r\nexport const fetchOrdersSuccess = (orders) => {\r\n  return {\r\n    type: actionTypes.FETCH_ORDERS_SUCCESS,\r\n    orders: orders,\r\n  };\r\n};\r\n\r\nexport const fetchOrdersFail = (error) => {\r\n  return {\r\n    type: actionTypes.FETCH_ORDERS_FAIL,\r\n    error: error,\r\n  };\r\n};\r\n\r\nexport const fetchOrdersStart = () => {\r\n  return {\r\n    type: actionTypes.FETCH_ORDERS_START,\r\n  };\r\n};\r\n\r\nexport const fetchOrders = (token, userId) => {\r\n  return (dispatch) => {\r\n    dispatch(fetchOrdersStart());\r\n    const queryParams = `?auth=${token}&orderBy=\"userId\"&equalTo=\"${userId}\"`;\r\n    axios\r\n      .get(`/orders.json${queryParams}`)\r\n      .then((res) => {\r\n        const fetchedOrders = [];\r\n        for (let key in res.data) {\r\n          fetchedOrders.push({\r\n            ...res.data[key],\r\n            id: key,\r\n          });\r\n        }\r\n        dispatch(fetchOrdersSuccess(fetchedOrders));\r\n      })\r\n      .catch((err) => {\r\n        dispatch(fetchOrdersFail());\r\n      });\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}