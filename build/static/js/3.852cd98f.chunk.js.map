{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css"],"names":["checkoutSummary","props","className","classes","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","isNumeric","country","email","isEmail","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","invalid","shouldValidate","changed","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","option","Label","label","module","exports"],"mappings":"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","file":"static/js/3.852cd98f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport Burger from \"../../Burger/Burger\";\r\nimport Button from \"../../UI/Button/Button\";\r\nimport classes from \"./CheckoutSummary.module.css\";\r\n\r\nconst checkoutSummary = (props) => {\r\n  return (\r\n    <div className={classes.CheckoutSummary}>\r\n      <h1>We hope it tastes well!</h1>\r\n      <div style={{ width: \"100%\", margin: \"auto\" }}>\r\n        <Burger ingredients={props.ingredients} />\r\n      </div>\r\n      <Button btnType=\"Danger\" clicked={props.checkoutCancelled}>\r\n        CANCEL\r\n      </Button>\r\n      <Button btnType=\"Success\" clicked={props.checkoutContinued}>\r\n        CONTINUE\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default checkoutSummary;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Button from \"../../../components/UI/Button/Button\";\r\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\r\nimport classes from \"./ContactData.module.css\";\r\nimport axios from \"../../../axios-orders\";\r\nimport Input from \"../../../components/UI/Input/Input\";\r\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\r\nimport * as actions from \"../../../store/actions/index\";\r\nimport { updateObject, checkValidity } from \"../../../shared/utility\";\r\n\r\nclass ContactData extends Component {\r\n  state = {\r\n    orderForm: {\r\n      name: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Your Name\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      street: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Street\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      zipCode: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"ZIP Code\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 5,\r\n          maxLength: 5,\r\n          isNumeric: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      country: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Country\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Your E-Mail\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          isEmail: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      deliveryMethod: {\r\n        elementType: \"select\",\r\n        elementConfig: {\r\n          options: [\r\n            { value: \"fastest\", displayValue: \"Fastest\" },\r\n            { value: \"cheapest\", displayValue: \"Cheapest\" },\r\n          ],\r\n        },\r\n        value: \"fastest\",\r\n        validation: {},\r\n        valid: true,\r\n      },\r\n    },\r\n    formIsValid: false,\r\n  };\r\n\r\n  orderHandler = (event) => {\r\n    event.preventDefault();\r\n    const formData = {};\r\n    for (let formElementIdentifier in this.state.orderForm) {\r\n      formData[formElementIdentifier] = this.state.orderForm[\r\n        formElementIdentifier\r\n      ].value;\r\n    }\r\n    const order = {\r\n      ingredients: this.props.ings,\r\n      price: this.props.price,\r\n      orderData: formData,\r\n      userId: this.props.userId,\r\n    };\r\n    this.props.onOrderBurger(order, this.props.token);\r\n  };\r\n\r\n  inputChangedHandler = (event, inputIdentifier) => {\r\n    const updatedFormElement = updateObject(\r\n      this.state.orderForm[inputIdentifier],\r\n      {\r\n        value: event.target.value,\r\n        valid: checkValidity(\r\n          event.target.value,\r\n          this.state.orderForm[inputIdentifier].validation\r\n        ),\r\n        touched: true,\r\n      }\r\n    );\r\n    const updatedOrderForm = updateObject(this.state.orderForm, {\r\n      [inputIdentifier]: updatedFormElement,\r\n    });\r\n\r\n    let formIsValid = true;\r\n    for (let inputIdentifier in updatedOrderForm) {\r\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n    }\r\n    this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid });\r\n  };\r\n\r\n  render() {\r\n    const formElementsArray = [];\r\n    for (let key in this.state.orderForm) {\r\n      formElementsArray.push({\r\n        id: key,\r\n        config: this.state.orderForm[key],\r\n      });\r\n    }\r\n    let form = (\r\n      <form onSubmit={this.orderHandler}>\r\n        {formElementsArray.map((formElement) => (\r\n          <Input\r\n            key={formElement.id}\r\n            elementType={formElement.config.elementType}\r\n            elementConfig={formElement.config.elementConfig}\r\n            value={formElement.config.value}\r\n            invalid={!formElement.config.valid}\r\n            shouldValidate={formElement.config.validation}\r\n            touched={formElement.config.touched}\r\n            changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n          />\r\n        ))}\r\n        <Button btnType=\"Success\" disabled={!this.state.formIsValid}>\r\n          ORDER\r\n        </Button>\r\n      </form>\r\n    );\r\n    if (this.props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n    return (\r\n      <div className={classes.ContactData}>\r\n        <h4>Enter your Contact Data</h4>\r\n        {form}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredients,\r\n    price: state.burgerBuilder.totalPrice,\r\n    loading: state.order.loading,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId,\r\n  };\r\n};\r\n\r\nconst mapDispatchBurgerProps = (dispatch) => {\r\n  return {\r\n    onOrderBurger: (orderData, token) =>\r\n      dispatch(actions.purchaseBurger(orderData, token)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchBurgerProps\r\n)(withErrorHandler(ContactData, axios));\r\n","import React, { Component } from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport CheckoutSummary from \"../../components/Order/CheckoutSummary/CheckoutSummary\";\r\nimport ContactData from \"./ContactData/ContactData\";\r\n\r\nclass Checkout extends Component {\r\n  checkoutCancelledHandler = () => {\r\n    this.props.history.goBack();\r\n  };\r\n\r\n  checkoutContinuedHandler = () => {\r\n    this.props.history.replace(\"/checkout/contact-data\");\r\n  };\r\n\r\n  render() {\r\n    let summary = <Redirect to=\"/\" />;\r\n\r\n    if (this.props.ings) {\r\n      const purchasedRedirect = this.props.purchased ? (\r\n        <Redirect to=\"/\" />\r\n      ) : null;\r\n      summary = (\r\n        <div>\r\n          {purchasedRedirect}\r\n          <CheckoutSummary\r\n            ingredients={this.props.ings}\r\n            checkoutCancelled={this.checkoutCancelledHandler}\r\n            checkoutContinued={this.checkoutContinuedHandler}\r\n          />\r\n          <Route\r\n            path={this.props.match.path + \"/contact-data\"}\r\n            component={ContactData}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n    return summary;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredients,\r\n    purchased: state.order.purchased,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Checkout);\r\n","import React from \"react\";\r\nimport classes from \"./Input.module.css\";\r\n\r\nconst input = (props) => {\r\n  let inputElement = null;\r\n  const inputClasses = [classes.InputElement];\r\n  if (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(classes.Invalid);\r\n  }\r\n  switch (props.elementType) {\r\n    case \"input\":\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case \"textarea\":\r\n      inputElement = (\r\n        <textarea\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case \"select\":\r\n      inputElement = (\r\n        <select\r\n          className={inputClasses.join(\" \")}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        >\r\n          {props.elementConfig.options.map((option) => (\r\n            <option key={option.value} value={option.value}>\r\n              {option.displayValue}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n  }\r\n  return (\r\n    <div className={classes.Input}>\r\n      <label className={classes.Label}>{props.label}</label>\r\n      {inputElement}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2hw6O\",\"Label\":\"Input_Label__288MG\",\"InputElement\":\"Input_InputElement__1eKn7\",\"Invalid\":\"Input_Invalid__2yMwS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__17TEc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__eduZe\"};"],"sourceRoot":""}